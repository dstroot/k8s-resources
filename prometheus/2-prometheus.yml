apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    component: core
  name: prometheus
  namespace: monitoring
  annotations:
    prometheus.io/scrape: 'true'
spec:
  selector:
    app: prometheus
    component: core
  # You should not use a load balancer with external access.
  # Prometheus alone does not have any security. You should use
  # NodePort and proxy access using NGINX so you can set TLS
  # termination and a password.
  type: NodePort  # NodePort LoadBalancer
  ports:
  - port: 9090 # the port that this service should serve on
    targetPort: prometheus  # port on container
    protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    component: core
spec:
  replicas: 1
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
        component: core
      # If we annotate the pod properly then prometheus will
      # discover itself and automatically scrape it's own endpoint. Cool!
      # annotations:
      #   prometheus.io/scrape: "true"
      #   prometheus.io/port: "9090"
    spec:
      # The default value of storage.local.target-heap-size is 2GiB 
      # and thus tailored to 3GiB of physical memory usage. If you have 
      # less physical memory available, you have to lower the flag value. 
      # If you have more memory available, you should raise the value 
      # accordingly. Otherwise, Prometheus will not make use of the 
      # memory and thus will perform much worse than it could.
      containers:
      - name: prometheus
        image: prom/prometheus:v1.5.2
        args:
          - '-storage.local.retention=72h'
          - '-storage.local.path=/prometheus'
          - '-config.file=/etc/prometheus/prometheus.yml'
          - '-alertmanager.url=http://alertmanager:9093' # need alertmanager setup
        ports:
        - name: prometheus
          containerPort: 9090
        resources:
          requests:
            cpu: 100m
            memory: 500Mi
          limits:
            cpu: 500m
            memory: 2500Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: prometheus
          mountPath: /prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus
      - name: prometheus
        gcePersistentDisk:
          pdName: prometheus # This GCE persistent disk must already exist
          fsType: ext4
# ---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: prometheus
#   # namespace: prometheus
#   # The annotations below make the magic happen
#   # GKE has a native ingress controller, so to *not* use the native one:
#   #  Set the annotation `kubernetes.io/ingress.class: "nginx"`
#   #  Set the annotation `kubernetes.io/tls-acme: "true"` for automatic TLS
#   annotations:
#     kubernetes.io/tls-acme: "true"
#     kubernetes.io/ingress.class: "nginx"
# spec:
#   tls:
#   # Setup a CNAME to point to the LB IP address
#   - hosts:
#     - auth.thepishoppe.com
#     secretName: auth-tls
#   rules:
#   - host: auth.thepishoppe.com
#     http:
#       paths:
#       - path: /
#         backend:
#           serviceName: hello
#           servicePort: 80
#       - path: /prometheus
#         backend:
#           serviceName: prometheus
#           servicePort: 80
#       - path: /grafana
#         backend:
#           serviceName: grafana
#           servicePort: 80
#       - path: /echo
#         backend:
#           serviceName: echoserver
#           servicePort: 80