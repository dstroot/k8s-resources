apiVersion: v1
kind: Service
metadata:
  name: nginx-vts
  namespace: nginx-ingress
spec:
  ports:
  - port: 80
    targetPort: 18080
    protocol: TCP
  selector:
    k8s-app: nginx-ingress-controller
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-vts
  namespace: nginx-ingress
  # The annotations below make the magic happen
  # GKE has a native ingress controller, so to *not* use the native one:
  #  Set the annotation `kubernetes.io/ingress.class: "nginx"`
  #  Set the annotation `kubernetes.io/tls-acme: "true"` for automatic TLS
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  # Setup a CNAME to point to the LB IP address
  - hosts:
    - nginx.thepishoppe.com
    secretName: nginx-vts-tls
  rules:
    # https://nginx.thepishoppe.com/nginx_status
  - host: nginx.thepishoppe.com
    http:
      paths:
      - path: / 
        backend:
          serviceName: nginx-vts
          servicePort: 80
# NOTE: It's only possible to create an ingress to address services inside 
# the namespace in which the Ingress resides. Not allowing this was a 
# conscious decision - the model partitions on namespace boundaries 
# and disallows service sharing across namespaces. Example use case: I'm 
# running multiple namespaces on a single cluster - kubernetes tests, blog, 
# API, maim site, etc. I want to address these as subdomains on my domain 
# using a single ingress controller because load balancers and IP addresses 
# are expensive on GCE. Can't do this and it was intentionally avoided. Cross 
# namespace references would be a prime source of privilege escalation attacks.